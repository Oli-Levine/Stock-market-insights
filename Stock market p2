# ----------------------------------------------------------------------------
#            Stock Market Insights Dashboard
# ----------------------------------------------------------------------------
#
# Author: Oliver Levine
# Date: September 9, 2025
#
# Description:
# This script collects, analyzes, and visualizes stock market data for
# specified companies. It calculates key technical indicators like moving
# averages and volatility, generates insightful plots, and produces dynamic
# text summaries of the stock's performance. This project is designed to
# be run in a Google Colab environment.
#
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Step 1: Install and Import Necessary Libraries
# ----------------------------------------------------------------------------
# We start by installing 'yfinance', a popular library to fetch historical
# market data from Yahoo Finance.

try:
    import yfinance as yf
except ImportError:
    print("yfinance not found. Installing...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "yfinance"])
    import yfinance as yf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.gridspec import GridSpec

# Set a professional style for the plots
plt.style.use('seaborn-v0_8-darkgrid')

print("Libraries installed and imported successfully.")

# ----------------------------------------------------------------------------
# Step 2: Define Stocks and Data Collection Period
# ----------------------------------------------------------------------------
# Here we specify the stock tickers and the time frame for our analysis.
# Tickers: AAPL (Apple), RYAAY (Ryanair), UBER (Uber)
# We'll analyze data from the last two years.

tickers = ['AAPL', 'RYAAY', 'UBER']
# Using .normalize() removes the time component, ensuring we get clean dates.
start_date = (pd.to_datetime('today') - pd.DateOffset(years=2)).normalize()
end_date = pd.to_datetime('today').normalize()

# Download the data using yfinance
# We use a dictionary to store the data for each stock.
stock_data = {}
for ticker in tickers:
    try:
        data = yf.download(ticker, start=start_date, end=end_date)
        if data.empty:
            print(f"No data found for {ticker}. It might be a delisted or incorrect ticker.")
        else:
            stock_data[ticker] = data
            print(f"Successfully downloaded data for {ticker}")
    except Exception as e:
        print(f"Could not download data for {ticker}. Error: {e}")

# ----------------------------------------------------------------------------
# Step 3: Calculate Key Indicators
# ----------------------------------------------------------------------------
# We will now calculate:
# 1. Moving Averages (MA): Short-term (20-day) and long-term (50-day) SMAs.
# 2. Daily Returns: The percentage change in the closing price.
# 3. Volatility: The rolling standard deviation of daily returns.

for ticker, data in stock_data.items():
    if not data.empty:
        data['SMA_20'] = data['Close'].rolling(window=20).mean()
        data['SMA_50'] = data['Close'].rolling(window=50).mean()
        data['Daily_Return'] = data['Close'].pct_change()
        data['Volatility'] = data['Daily_Return'].rolling(window=20).std()

print("\nKey indicators calculated for all stocks.")


# ----------------------------------------------------------------------------
# Step 4: Generate Visualizations
# ----------------------------------------------------------------------------
# For each stock, we will create three distinct and informative plots.

def create_dashboard(ticker, data):
    """Generates and displays a set of plots for a given stock."""
    if data.empty:
        print(f"Cannot generate dashboard for {ticker} due to missing data.")
        return

    print(f"\n--- Generating Dashboard for {ticker} ---")

    fig = plt.figure(figsize=(20, 14))
    fig.suptitle(f'Financial Dashboard for {ticker}', fontsize=24, weight='bold')
    gs = GridSpec(2, 2, figure=fig)

    ax1 = fig.add_subplot(gs[0, :])
    ax2 = fig.add_subplot(gs[1, 0])
    ax3 = fig.add_subplot(gs[1, 1])

    # --- Plot 1: Stock Price and Moving Averages ---
    ax1.plot(data.index, data['Close'], label='Close Price', color='blue', alpha=0.8)
    ax1.plot(data.index, data['SMA_20'], label='20-Day SMA', color='orange', linestyle='--')
    ax1.plot(data.index, data['SMA_50'], label='50-Day SMA', color='red', linestyle='--')
    ax1.set_title(f'{ticker} Stock Price and Moving Averages', fontsize=16)
    ax1.set_ylabel('Price (USD)', fontsize=12)
    ax1.set_xlabel('Date', fontsize=12)
    ax1.legend(fontsize=12)
    ax1.grid(True)
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    ax1.xaxis.set_major_locator(mdates.MonthLocator(interval=3))

    # --- Plot 2: Histogram of Daily Returns ---
    ax2.hist(data['Daily_Return'].dropna(), bins=50, color='green', alpha=0.7)
    ax2.set_title('Distribution of Daily Returns', fontsize=16)
    ax2.set_xlabel('Daily Return', fontsize=12)
    ax2.set_ylabel('Frequency', fontsize=12)
    ax2.grid(True)

    # --- Plot 3: Volatility Chart ---
    ax3.plot(data.index, data['Volatility'], label='20-Day Rolling Volatility', color='purple')
    ax3.set_title('20-Day Rolling Volatility', fontsize=16)
    ax3.set_xlabel('Date', fontsize=12)
    ax3.set_ylabel('Standard Deviation', fontsize=12)
    ax3.grid(True)
    ax3.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))
    ax3.xaxis.set_major_locator(mdates.MonthLocator(interval=3))

    plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show()

for ticker in tickers:
    if ticker in stock_data:
        create_dashboard(ticker, stock_data[ticker])

# ----------------------------------------------------------------------------
# Step 5: Dynamic Insight Summaries
# ----------------------------------------------------------------------------
# This function generates a text-based summary of the stock's current
# situation based on the calculated indicators.

def generate_insight_summary(ticker, data):
    """Creates a dynamic summary of the stock's performance."""
    if data.empty or len(data) < 50:
        print(f"\nNot enough data to generate a summary for {ticker}.")
        return

    print(f"\n--- Dynamic Insight Summary for {ticker} ---")

    latest = data.iloc[-1]
    previous = data.iloc[-2]

    # --- FIXED: Use .loc[] to access the scalar value for formatting and comparison ---
    # 1. Price and Trend Analysis
    price_info = f"Latest Close Price: ${latest.loc['Close']:.2f}"
    trend = "Neutral"
    if latest.loc['SMA_20'] > latest.loc['SMA_50'] and previous.loc['SMA_20'] <= previous.loc['SMA_50']:
        trend = "Bullish (Golden Cross Signal)"
    elif latest.loc['SMA_20'] < latest.loc['SMA_50'] and previous.loc['SMA_20'] >= previous.loc['SMA_50']:
        trend = "Bearish (Death Cross Signal)"
    elif latest.loc['SMA_20'] > latest.loc['SMA_50']:
        trend = "Currently in a Bullish Trend"
    else:
        trend = "Currently in a Bearish Trend"

    # 2. Returns and Volatility Analysis
    avg_return = data['Daily_Return'].mean()
    latest_volatility = latest.loc['Volatility']
    # --- END OF FIX ---

    risk_level = "Low"
    if latest_volatility > data['Volatility'].quantile(0.75):
        risk_level = "High"
    elif latest_volatility > data['Volatility'].quantile(0.50):
        risk_level = "Moderate"

    # 3. Print the summary
    print(f"1. Performance Snapshot:")
    print(f"   - {price_info}")
    print(f"   - Market Trend: {trend}")

    print(f"\n2. Risk Analysis:")
    print(f"   - Average Daily Return: {(avg_return * 100):.4f}%")
    print(f"   - Latest 20-Day Volatility: {latest_volatility:.4f}")
    print(f"   - Current Risk Profile: {risk_level}")

    print("\nDisclaimer: This is a data-driven summary and not financial advice.")
    print("-" * 50)


# Generate summaries for all stocks
for ticker in tickers:
    if ticker in stock_data:
        generate_insight_summary(ticker, stock_data[ticker])